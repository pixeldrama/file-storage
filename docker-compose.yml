services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOCKER_PROXY: ${DOCKER_PROXY:-docker.io}
    ports:
      - "8080:8080"
    environment:
      - BLOB_STORAGE_URL=http://azurite:10000/devstoreaccount1
      - BLOB_ACCOUNT_NAME=devstoreaccount1
      - CONTAINER_NAME=files
      - SERVER_PORT=8080
      - USE_MOCK_STORAGE=false
      - USE_MOCK_VIRUS_CHECKER=true
      - USE_MOCK_AUTHORIZATION=true
      - VAULT_ADDRESS=http://vault:8200
      - VAULT_ROLE_ID=test-role-id
      - VAULT_SECRET_ID=test-secret-id
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=file_storage
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - USE_IN_MEMORY_REPO=false
      - LOG_FORMAT=ecs
    depends_on:
      vault-init:
        condition: service_completed_successfully
      db-init:
        condition: service_completed_successfully
      azurite:
        condition: service_started
      azurite-init:
        condition: service_completed_successfully

  test-api:
    build:
      context: .
      dockerfile: Dockerfile.test-api
    environment:
      - APP_URL=http://app:8080
      - VAULT_ROLE_ID=test-role-id
      - VAULT_SECRET_ID=test-secret-id
    depends_on:
      app:
        condition: service_started
      azurite-init:
        condition: service_completed_successfully
      db-init:
        condition: service_completed_successfully
      vault-init:
        condition: service_completed_successfully

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - azurite_data:/data

  azurite-init:
    image: mcr.microsoft.com/azure-cli
    depends_on:
      azurite:
        condition: service_started
    command: az storage container create --name files --connection-string 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;'

  vault:
    image: ${DOCKER_PROXY:-docker.io}/hashicorp/vault:1.16.0
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: server -dev
    healthcheck:
      test: ["CMD", "sh", "-c", "VAULT_ADDR=http://localhost:8200 vault status"]
      interval: 5s
      timeout: 5s
      retries: 5

  vault-init:
    image: ${DOCKER_PROXY:-docker.io}/alpine:latest
    depends_on:
      vault:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    environment:
     - VAULT_ADDR=http://vault:8200
     - VAULT_TOKEN=dev-token
     - AZURE_STORAGE_ACCOUNT=devstoreaccount1
     - AZURE_STORAGE_KEY=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
     - BLOB_STORAGE_URL=http://azurite:10000/devstoreaccount1
     - CONTAINER_NAME=files
    command: >
     /bin/sh -c "apk add --no-cache bash curl dos2unix jq &&
        dos2unix /scripts/init-vault.sh &&
        bash /scripts/init-vault.sh"

  postgres:
    image: ${DOCKER_PROXY:-docker.io}/postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=file_storage
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-init:
    image: ${DOCKER_PROXY:-docker.io}/migrate/migrate:latest
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=file_storage
    command: -path=/migrations -database="postgres://postgres:postgres@postgres:5432/file_storage?sslmode=disable" up
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "postgres", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  curl:
    build:
      context: .
      dockerfile: Dockerfile.curl
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/bin/sh", "-c"]


volumes:
  azurite_data:
  postgres_data: 
